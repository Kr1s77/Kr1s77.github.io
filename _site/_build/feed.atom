<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Kris Liang's Learning And Writings</title>
  <id>https://kr1s77.github.io/feed.atom</id>
  <updated>2021-07-13T00:00:00Z</updated>
  <link href="https://kr1s77.github.io/" />
  <link href="https://kr1s77.github.io/feed.atom" rel="self" />
  <subtitle type="text">Kris Liang's personal blog about programming, games and random thoughts that come to his mind.</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="https://kr1s77.github.io/feed.atom">
    <title type="text">mysql paradigm</title>
    <id>https://kr1s77.github.io/2021/7/13/Mysql-paradigm</id>
    <updated>2021-07-13T00:00:00Z</updated>
    <link href="https://kr1s77.github.io/2021/7/13/Mysql-paradigm" />
    <author>
      <name>Kris Liang</name>
    </author>
    <content type="html">&lt;div class=&quot;line-block&quot;&gt;
&lt;div class=&quot;line&quot;&gt;1. 保证表中每列数据的原子性，及每列数据都是不可拆分的&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;2. 保证一个表只描述一件事情，否则这张表就是需要拆分为多个的&lt;/div&gt;
&lt;div class=&quot;line&quot;&gt;3. 保证表中的数据都依赖于主键，不能出现传递依赖的关系，即 A -&amp;gt; B -&amp;gt; C -&amp;gt; 主键&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;以上为个人理解的 &lt;strong&gt;MYSQL&lt;/strong&gt; 三范式。&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="https://kr1s77.github.io/feed.atom">
    <title type="text">How do I run python on Android devices</title>
    <id>https://kr1s77.github.io/2021/7/12/How-do-I-run-python-on-Android-devices</id>
    <updated>2021-07-12T00:00:00Z</updated>
    <link href="https://kr1s77.github.io/2021/7/12/How-do-I-run-python-on-Android-devices" />
    <author>
      <name>Kris Liang</name>
    </author>
    <content type="html">&lt;p&gt;第一个版本的安卓版 4G 代理是运行在电脑上的，电脑当作一个中转服务站
，切换 IP、流量接收都是由电脑完成，然后手机端安装 &lt;cite&gt;privoxy&lt;/cite&gt; 使用
电脑 &lt;cite&gt;adb forward&lt;/cite&gt; 命令做端口转发即可，现在想开发一个服务是直接运
行在 android 设备上的，在开发过程中遇到一个问题就是如何在手机上直接
能运行 &lt;cite&gt;python&lt;/cite&gt; 程序，这样我们的服务就可以完美的运行在手机上了。&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;python&quot;&gt;
&lt;h2&gt;调研（怎样在手机上运行 python 程序）：&lt;/h2&gt;
&lt;p&gt;调研一圈以后发现 tmux 可以在手机上直接跑 python 程序，并且 python3-python2 都是支持的，
这里先放一下链接 &lt;cite&gt;https://termux.com/&lt;/cite&gt;, 但是当我们使用的时候又发现了一个问题，就是 python
只能在 termux 终端里面使用，是无法在 &lt;cite&gt;adb shell&lt;/cite&gt; 中调用的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;termux-python-adb-shell&quot;&gt;
&lt;h2&gt;调研（怎样移植 termux 中的 python 到 adb shell 中）：&lt;/h2&gt;
&lt;p&gt;经过一圈的调研以后终于找到了完美的解决办法，那就是将 termux 中的 python 可执行文件移动到 &lt;cite&gt;/system/xbin/&lt;/cite&gt; 目录下即可，
这样我们在 adb shell 中直接输入 python 就可以愉快的玩耍了，在配置之前请确保手机可以 root，remount 下面开始操作&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// 初始化环境
&amp;gt; adb root     // super
&amp;gt; adb remount  // remount file

// 手机安装 termux，在 termux 中安装 python3
&amp;gt; pkg install python

// 移动目录文件
&amp;gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /data/data/com.termux/files/usr/bin
&amp;gt; ls
// 输出内容
sailfish:/data/data/com.termux/files/usr/bin &lt;span class=&quot;c1&quot;&gt;# ls | grep python&lt;/span&gt;
python
python-config
python3
python3-config
python3.9
python3.9-config
sailfish:/data/data/com.termux/files/usr/bin &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

// 这里测试此 Python 是否是我们想要的，得到的答案当然是
sailfish:/data/data/com.termux/files/usr/bin &lt;span class=&quot;c1&quot;&gt;# ./python&lt;/span&gt;
Python &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.9.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default, Jun &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2021&lt;/span&gt;, &lt;span class=&quot;m&quot;&gt;09&lt;/span&gt;:17:59&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Clang &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;.0.8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://android.googlesource.com/toolchain/llvm-project 98c855489 on linux
Type &lt;span class=&quot;s2&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt;

// 移动 python 可执行文件到 /system/xbin/ 下
&amp;gt; cp /data/data/com.termux/files/usr/bin/python /system/xbin/

// 然后回到根目录下执行 python 试试是不是成功了
sailfish:/ &lt;span class=&quot;c1&quot;&gt;# python&lt;/span&gt;
Python &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.9.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default, Jun &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2021&lt;/span&gt;, &lt;span class=&quot;m&quot;&gt;09&lt;/span&gt;:17:59&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Clang &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;.0.8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://android.googlesource.com/toolchain/llvm-project 98c855489 on linux
Type &lt;span class=&quot;s2&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果按照我的操作步骤做还是失败了，可以到 &lt;cite&gt;FGProxy&lt;/cite&gt; 仓库中提 issues。仓库链接 &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/Kr1s77/FgSurfing&quot;&gt;https://github.com/Kr1s77/FgSurfing&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="https://kr1s77.github.io/feed.atom">
    <title type="text">How do I decorate asynchronous functions with python</title>
    <id>https://kr1s77.github.io/2021/7/1/How-do-I-decorate asynchronous-functions with-python</id>
    <updated>2021-07-01T00:00:00Z</updated>
    <link href="https://kr1s77.github.io/2021/7/1/How-do-I-decorate asynchronous-functions with-python" />
    <author>
      <name>Kris Liang</name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;id1&quot;&gt;
&lt;h2&gt;起因：&lt;/h2&gt;
&lt;p&gt;由于需要添加一个预警程序，但是不想修改原来的异步方法，所以选择使用装饰器的方式实现，
使用装饰器有一个好处就是我们能取到方法的参数和返回值，这样更加的方便我们去做预警程序，
我们可以将参数和返回值都输出到预警内容当中去。开始想要用装饰器的时候就发现我的这个方法
是个异步的方法，那怎么办呢？&lt;/p&gt;
&lt;p&gt;当然有解决办法了！请看下面的程序，首先第一个程序实现的是最基本的装饰器的功能&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;id2&quot;&gt;
&lt;h2&gt;示例以及简单讲解：&lt;/h2&gt;
&lt;p&gt;首先展示一个最基本的装饰器，功能很少，但是很强大，可以做到很多事情&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@func_decorator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return_a_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上面的例子我们可以看出，方法是在装饰器中执行了，并且我们将 &lt;cite&gt;return_a_num&lt;/cite&gt; 方法的返回值加一输出了出来
下面我们就开始看看如何给装饰器传递参数，如果想要了解 &lt;cite&gt;functools.wraps&lt;/cite&gt; 的实现原理可以尝试看一下源码，
这里不做过多的赘述。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_two_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Use Wraps to decorate the wrapper to pass parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@add_two_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;return_a_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码我们都实现了输出 4 的功能，但是装饰器是同步的，只能装饰同步方法，
如果想要装饰异步方法只要在 &lt;cite&gt;wrapper&lt;/cite&gt; 方法前加上 &lt;cite&gt;async&lt;/cite&gt; 即可&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Individual decorators cannot pass parameters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;redundant_print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;


&lt;span class=&quot;nd&quot;&gt;@redundant_print&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以传递参数，只需要加上一个 &lt;cite&gt;async&lt;/cite&gt; 即可使用，并且可以传递参数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Double decor that can pass parameters&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_two_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@wraps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

